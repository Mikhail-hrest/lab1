//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#ifndef APPCLASS_SM_H
#define APPCLASS_SM_H


#define SMC_USES_IOSTREAMS

#include "statemap.h"

// Forward declarations.
class Map1;
class Map1_START;
class Map1_PrBEGIN;
class Map1_BEGIN;
class Map1_PRE_NAME;
class Map1_NAME;
class Map1_SIGN;
class Map1_END;
class Map1_ERROR;
class Map1_OK;
class Map1_Default;
class AppClassState;
class AppClassContext;
class AppClass;

class AppClassState :
    public statemap::State
{
public:

    AppClassState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(AppClassContext&) {};
    virtual void Exit(AppClassContext&) {};

    virtual void Begin(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void End(AppClassContext& context);
    virtual void Error(AppClassContext& context);
    virtual void ExcMark(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void PreBegin(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Unexcept(AppClassContext& context);

protected:

    virtual void Default(AppClassContext& context);
};

class Map1
{
public:

    static Map1_START START;
    static Map1_PrBEGIN PrBEGIN;
    static Map1_BEGIN BEGIN;
    static Map1_PRE_NAME PRE_NAME;
    static Map1_NAME NAME;
    static Map1_SIGN SIGN;
    static Map1_END END;
    static Map1_ERROR ERROR;
    static Map1_OK OK;
};

class Map1_Default :
    public AppClassState
{
public:

    Map1_Default(const char * const name, const int stateId)
    : AppClassState(name, stateId)
    {};

    virtual void PreBegin(AppClassContext& context);
    virtual void Error(AppClassContext& context);
    virtual void Unexcept(AppClassContext& context);
    virtual void ExcMark(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Begin(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void End(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
};

class Map1_START :
    public Map1_Default
{
public:
    Map1_START(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void PreBegin(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Unexcept(AppClassContext& context);
};

class Map1_PrBEGIN :
    public Map1_Default
{
public:
    Map1_PrBEGIN(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Begin(AppClassContext& context);
};

class Map1_BEGIN :
    public Map1_Default
{
public:
    Map1_BEGIN(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void ExcMark(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void Space(AppClassContext& context);
};

class Map1_PRE_NAME :
    public Map1_Default
{
public:
    Map1_PRE_NAME(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void ExcMark(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void Space(AppClassContext& context);
};

class Map1_NAME :
    public Map1_Default
{
public:
    Map1_NAME(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void End(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void Space(AppClassContext& context);
};

class Map1_SIGN :
    public Map1_Default
{
public:
    Map1_SIGN(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void ExcMark(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void Space(AppClassContext& context);
};

class Map1_END :
    public Map1_Default
{
public:
    Map1_END(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void EOS(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Unexcept(AppClassContext& context);
};

class Map1_ERROR :
    public Map1_Default
{
public:
    Map1_ERROR(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

    virtual void Begin(AppClassContext& context);
    virtual void EOS(AppClassContext& context);
    virtual void End(AppClassContext& context);
    virtual void Error(AppClassContext& context);
    virtual void ExcMark(AppClassContext& context);
    virtual void Name(AppClassContext& context);
    virtual void PreBegin(AppClassContext& context);
    virtual void Sign(AppClassContext& context);
    virtual void Space(AppClassContext& context);
    virtual void Unexcept(AppClassContext& context);
};

class Map1_OK :
    public Map1_Default
{
public:
    Map1_OK(const char * const name, const int stateId)
    : Map1_Default(name, stateId)
    {};

};

class AppClassContext :
    public statemap::FSMContext
{
public:

    explicit AppClassContext(AppClass& owner)
    : FSMContext(Map1::START),
      _owner(owner)
    {};

    AppClassContext(AppClass& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline AppClass& getOwner()
    {
        return (_owner);
    };

    inline AppClassState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<AppClassState&>(*_state);
    };

    inline void Begin()
    {
        getState().Begin(*this);
    };

    inline void EOS()
    {
        getState().EOS(*this);
    };

    inline void End()
    {
        getState().End(*this);
    };

    inline void Error()
    {
        getState().Error(*this);
    };

    inline void ExcMark()
    {
        getState().ExcMark(*this);
    };

    inline void Name()
    {
        getState().Name(*this);
    };

    inline void PreBegin()
    {
        getState().PreBegin(*this);
    };

    inline void Sign()
    {
        getState().Sign(*this);
    };

    inline void Space()
    {
        getState().Space(*this);
    };

    inline void Unexcept()
    {
        getState().Unexcept(*this);
    };

private:
    AppClass& _owner;
};


#endif // APPCLASS_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
