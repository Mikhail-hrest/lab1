//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : AppClass.sm
//

#include "AppClass.h"
#include "AppClass_sm.h"

using namespace statemap;

// Static class declarations.
Map1_START Map1::START("Map1::START", 0);
Map1_PrBEGIN Map1::PrBEGIN("Map1::PrBEGIN", 1);
Map1_BEGIN Map1::BEGIN("Map1::BEGIN", 2);
Map1_PRE_NAME Map1::PRE_NAME("Map1::PRE_NAME", 3);
Map1_NAME Map1::NAME("Map1::NAME", 4);
Map1_SIGN Map1::SIGN("Map1::SIGN", 5);
Map1_END Map1::END("Map1::END", 6);
Map1_ERROR Map1::ERROR("Map1::ERROR", 7);
Map1_OK Map1::OK("Map1::OK", 8);

void AppClassState::Begin(AppClassContext& context)
{
    Default(context);
}

void AppClassState::EOS(AppClassContext& context)
{
    Default(context);
}

void AppClassState::End(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Error(AppClassContext& context)
{
    Default(context);
}

void AppClassState::ExcMark(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Name(AppClassContext& context)
{
    Default(context);
}

void AppClassState::PreBegin(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Sign(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Space(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Unexcept(AppClassContext& context)
{
    Default(context);
}

void AppClassState::Default(AppClassContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Default::PreBegin(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::Error(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::Unexcept(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::ExcMark(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::Begin(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::Name(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::Sign(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::End(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_Default::EOS(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::START);
    context.getState().Entry(context);

}

void Map1_START::PreBegin(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::PrBEGIN);
    context.getState().Entry(context);

}

void Map1_START::Space(AppClassContext& context)
{


}

void Map1_START::Unexcept(AppClassContext& context)
{


}

void Map1_PrBEGIN::Begin(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::BEGIN);
    context.getState().Entry(context);

}

void Map1_BEGIN::ExcMark(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NameSpace();
        context.setState(Map1::NAME);
    }
    catch (...)
    {
        context.setState(Map1::NAME);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_BEGIN::Name(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NameSpace();
        context.setState(Map1::NAME);
    }
    catch (...)
    {
        context.setState(Map1::NAME);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_BEGIN::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::PRE_NAME);
    context.getState().Entry(context);

}

void Map1_PRE_NAME::ExcMark(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NameSpace();
        context.setState(Map1::NAME);
    }
    catch (...)
    {
        context.setState(Map1::NAME);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_PRE_NAME::Name(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NameSpace();
        context.setState(Map1::NAME);
    }
    catch (...)
    {
        context.setState(Map1::NAME);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_PRE_NAME::Space(AppClassContext& context)
{


}

void Map1_NAME::End(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.UnNameSpace();
        context.setState(Map1::END);
    }
    catch (...)
    {
        context.setState(Map1::END);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_NAME::Name(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    AppClassState& endState = context.getState();

    context.clearState();
    try
    {
        ctxt.pluslen();
        context.setState(endState);
    }
    catch (...)
    {
        context.setState(endState);
        throw;
    }

}

void Map1_NAME::Sign(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.UnNameSpace();
        context.setState(Map1::SIGN);
    }
    catch (...)
    {
        context.setState(Map1::SIGN);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_NAME::Space(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.UnNameSpace();
        context.setState(Map1::SIGN);
    }
    catch (...)
    {
        context.setState(Map1::SIGN);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_SIGN::ExcMark(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NameSpace();
        context.setState(Map1::NAME);
    }
    catch (...)
    {
        context.setState(Map1::NAME);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_SIGN::Name(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.NameSpace();
        context.setState(Map1::NAME);
    }
    catch (...)
    {
        context.setState(Map1::NAME);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_SIGN::Sign(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::PRE_NAME);
    context.getState().Entry(context);

}

void Map1_SIGN::Space(AppClassContext& context)
{


}

void Map1_END::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Acceptable();
        context.setState(Map1::START);
    }
    catch (...)
    {
        context.setState(Map1::START);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_END::Space(AppClassContext& context)
{


}

void Map1_END::Unexcept(AppClassContext& context)
{


}

void Map1_ERROR::Begin(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::EOS(AppClassContext& context)
{
    AppClass& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        context.setState(Map1::START);
    }
    catch (...)
    {
        context.setState(Map1::START);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_ERROR::End(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::Error(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::ExcMark(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::Name(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::PreBegin(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::Sign(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::Space(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

void Map1_ERROR::Unexcept(AppClassContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::ERROR);
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
